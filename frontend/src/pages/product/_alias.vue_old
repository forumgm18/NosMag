<template lang="pug">
  main.container
    v-preloader.in-page(v-if="$fetchState.pending")
    template(v-else)
      h1.product-title {{title}}
      .product-additional
        .product-additional_item
          span.el-label Артикул:
          span.el-text {{art}}
        .product-rating-block
          v-stars(:rating="stars || 0" )
          nuxt-link.product-feedbacks.link(to="#feedbacks") {{declensionEndings(otzyvov,'otzyv')}} 
        .product-additional_item 
          //- span.el-text Купили {{kupili}} раз
          span.el-text Купили {{declensionEndings(kupili,'raz')}}

      section.content-section.product-page
        .product-page-column.slider
          .product-page-row
            .product-slider-block.thumbs(:class="{ 'has-arrow' : images && images.length > 4 }")
              vue-slick-carousel.thumbs-slider(
                v-bind="settingsProductSliderThumbs"
                ref="productSliderThumbs"
                :asNavFor="$refs.productSlider",
                :key="thumbsSliderKey"
                )
                .thumbs-item(
                  v-for="(itm, ind ) in images"
                  :key="`thumbs-${ind}`"
                  ) 
                  .thumbs-item_content
                    .img-box
                      img(:src="imgPath + itm")

                template(#prevArrow)
                  .thumbs-arrow.prev
                    svg.icon.icon-arrow-down <use href="#icon-arrow-down"/>
                template(#nextArrow)
                  .thumbs-arrow.next
                    svg.icon.icon-arrow-down <use href="#icon-arrow-down"/>


            .product-slider-block
              .product-slider
                vue-slick-carousel(
                  v-bind="settingsProductSlider"
                  ref="productSlider"
                  :asNavFor="$refs.productSliderThumbs"
                  :key="productSliderKey"
                  )
                  .product-slider-item(
                    v-for="(item, index ) in images"
                    :key="`slider-${index}`"
                    ) 
                    .product-slider-item-content
                      .img-box
                        vue-photo-zoom-pro(
                            :url="imgPath + item"
                            :highUrl="imgPath + item"
                            :width="imgWidth"
                            :height="imgHeight"
                            @update="imgUpdate"
                          )


          .product-page-row.show-desktop(v-if="info_table && info_table.length")
            //- .product-slider-block.thumbs
            .product-info-block
              .product-info-row( v-for="(item, index) in info_table" :key="index" )
                .el-label {{item.name}}:
                .el-text {{item.value}}

        
        .product-page-column.right
          //- h1.product-title {{title}}
          .product-page_price-block
            .actual( v-html="`${price} ${currencyShort}`")
            .old( v-html="`${oldprice} ${currencyShort}`")
          .product-page_sale-block
            .sale {{sale}}%
            .text( v-html="`${oldprice} ${currencyShort}`")

          .product-info-block.right
            .product-info-row(
              v-for="(p, i) in params"
              :key="`param-${i}`"
            )
              .el-label {{p.name}}:
              .el-text {{p.value}}
          
          .product-other-block(
            v-if="sameart && sameart.length"
            ref="otherBlock"
            )
            .el-label {{$options.SAMEART_LABEL}} {{sameart.length}}
            .product-other-slider(:class="{ 'has-arrows': hasArrows }")
              vue-slick-carousel(
                v-bind="settingsProductOtherSlider"
                ref="prOtherSlider"
                )
                .other-slider-item( 
                  v-for="(it, i ) in sameart" :key="`os-${i}`" 
                  :class="{current: it.alias === alias}"
                  ) 
                  nuxt-link.other-slider-item-content(
                    :to="it.alias"
                    :title="it.comment"
                    )
                    .img-box
                      img(:src="imgPath + it.image")  

                template(#prevArrow)
                  button.slider-arrow
                    svg.icon.icon-slider-arrow <use href="#icon-slider-arrow"/>
                template(#nextArrow)
                  button.slider-arrow
                    svg.icon.icon-slider-arrow <use href="#icon-slider-arrow"/>
          client-only
            product-tab-sizes(
              :sizes="sizes"
              :selected-size="selectedSize"
              @select-size="selectSize"
              )

          
          .product-quantity-block(v-if="selectedSize")
            .product-quantity-label {{$options.QUANTITY_LABEL}}
            .product-quantity
              v-input-number(
                v-if="selectedSize"
                :has-label="false"
                :min="1"
                :max="selectedSize.ostatok"
                :step="1"
                :val="selectedSizeCount"
                v-model="selectedSizeCount"
                border-color="currentColor"
              )  
              .product-quantity-available( v-if="selectedSize") {{$options.AVAILABLE_LABEL}}{{selectedSize.ostatok}}
          
          .product-order-block
            .product-delivery-info
              .product-delivery-label 
                span.label {{$options.DELIVERY_LABEL}}
                span.text Хрен знает когда
              .btn(@click.prevent="addToCart") {{$options.ADD_TO_BASKET_TEXT}}
            div
              .product-delivery-info-text
                svg.icon.icon-delivery <use href="#icon-delivery"/>
                span {{$options.DELIVERY_TEXT}}
              .product-delivery-info-text
                svg.icon.icon-return-arrows <use href="#icon-return-arrows"/>
                span {{$options.RETURN_TEXT}}

          .product-info-block.show-mobile(v-if="info_table && info_table.length")
            .product-info-row( v-for="(item, index) in info_table" :key="index" )
              .product-info-label {{item.name}}:
              .product-info-text {{item.value}}


      page-product-feedback(:feedbacks="feedbacks" :stars="stars" :otzyvov="otzyvov")
    
</template>
<script>
import {mapState} from 'vuex'

import VueSlickCarousel from 'vue-slick-carousel'

import VuePhotoZoomPro from 'vue-photo-zoom-pro'
import 'vue-photo-zoom-pro/dist/style/vue-photo-zoom-pro.css'

export default {
  name:'product-page',
  components:{
    VueSlickCarousel,
    VuePhotoZoomPro,
  },
  data: function () {
    return {
      imgWidth: 0,
      imgHeight: 0,
      hasArrows: false,
      // loading: false,
      onlyWithFoto: false,
      settingsProductSlider: {
        lazyLoad: 'ondemand',
        dots: false,
        arrows: false,
        infinite: true,
        draggable: true,
        slidesToShow: 1,
        slidesToScroll: 1,
        focusOnSelect: true,

        responsive: [
          {
            breakpoint: 767,
            settings: {
              slidesToShow: 2,
              slidesToScroll: 1,
              infinite: true,
              dots: true,
              variableWidth: true,
              dotsClass: "slick-dots product-slider-dots",
            }
          },
          {
            breakpoint: 480,
            settings: {
              slidesToShow: 1,
              slidesToScroll: 1,
              infinite: true,
              dots: true,
              variableWidth: false,
              dotsClass: "slick-dots product-slider-dots",
            }
          }
        ]

      },
      settingsProductSliderThumbs: {
        lazyLoad: 'ondemand',
        dots: false,
        arrows: true,
        infinite: true,
        vertical: true,
        slidesToShow: 4,
        slidesToScroll: 1,
        focusOnSelect: true,
      },
      settingsProductOtherSlider: {
        lazyLoad: 'ondemand',
        dots: false,
        arrows: true,
        infinite: true,
        // infinite: false,
        // variableWidth: true,
        // slidesToShow: 7,
        slidesToShow: 6,
        slidesToScroll: 1,
        // centerMode: true,
        // centerPadding: '0',
        responsive: [
          {
            breakpoint: 1600,
            settings: {
              slidesToShow: 6,
            }
          },
          {
            breakpoint: 1300,
            settings: {
              slidesToShow: 5,
            }
          },
          {
            breakpoint: 1100,
            settings: {
              slidesToShow: 4,
            }
          },
          {
            breakpoint: 767,
            settings: {
              slidesToShow: 7,
            }
          },
        ]


      },
      quantity: 1,           // Количество выбранных товаров текущего вида 
      selectedSize: null,
      selectedSizeCount: 1,
      productSliderKey: 'p1',
      thumbsSliderKey: 't1'
    }
  },
  SHOE_SIZE: 'Размер обуви:',
  // TABLE_SIZES_TEXT: 'Таблица размеров',
  ADD_TO_BASKET_TEXT: 'Добавить в корзину',
  DELIVERY_LABEL: 'Доставка: ',
  DELIVERY_TEXT: 'Стоимость доставки зависит от суммы покупки',
  RETURN_TEXT: 'Имеется возможность возврата',
  AVAILABLE_LABEL: 'В наличии: ',
  QUANTITY_LABEL: 'Количество:',
  SAMEART_LABEL: 'Другие цвета:',
  RUB: 'руб.',
  RUB_OLD: 'р.',
  OTHTER_SLIDER_SHOW_ITEMS_DEFAULT: {count: 7, width: 107},
  OTHTER_SLIDER_SHOW_ITEMS: {
    1200: {count: 5, width: 107},
    992: {count: 4, width: 85},
    767: {count: 7, width: 75},
    576: {count: 7, width: 43}
  },
  async fetch() {
    const res = await this.$store.dispatch('product/fetchProduct', this.$route.params.alias)
    if (res ==='error') return this.$nuxt.error({ statusCode: 404, message: 'Раздел не найден' })
  },

  computed: {
    ...mapState('product', [
      'alias', 'art', 'case', 'caseq', 'category', 'category_id', 'comment', 
      'daytoday', 'delivery', 'econom', 'feedbacks', 'filters', 'hit', 'id', 
      'images', 'info_table', 'kupili', 'labels', 'menuItems', 'new', 'oldprice', 
      'otzyvov', 'params', 'price', 'prices', 'prices_table', 'prodano', 'qsign', 
      'razdel', 'razdel_id', 'razdel_id1', 'sameart', 'sizes', 'socks', 'stars', 
      'status', 'thumbs', 'title', 'tu'
    ]),
    ...mapState('settings', ['currency', 'currencyShort' ]),
    // currunsy    
    sale() { return this.$sale(this.price, this.oldprice) || 0},
    title() {return this.$store.getters['getPageTitle']},
    imgPath() {return this.$store.getters['settings/imgPath']},
    // otherSliderItemsShowSettings() {
    //   if (!process.browser) return 1
    //   const innerW = window.innerWidth
    //   const ossi = this.$options.OTHTER_SLIDER_SHOW_ITEMS
    //   const ossiKeys = Object.keys(ossi)
    //                     .map(itm => parseInt(itm,10))
    //                     .sort(this.$compareNumeric)
    //                     .reverse()
    //   const ossiKeyIndex = ossiKeys.find(item => this.$compareNumeric(item, innerW) >=0 )
    //   return ossiKeyIndex ? ossi[ossiKeyIndex] : this.$options.OTHTER_SLIDER_SHOW_ITEMS_DEFAULT
    // },

    // getOtherSliderWidth(){
    //   // Если функция вызвана на сервере или если нет других цветов товара
    //   if ( !process.browser || !this.sameart ) return 'auto'
    //   // Определяем количество видимых слайдов
    //   const tmp = this.otherSliderItemsShowSettings
    //   const sliderVisibleItems = Math.min(this.sameart.length, tmp.count)
    //   // Возвращаем ширину слайдера    
    //   return `${tmp.width * sliderVisibleItems}px`
    // },
    // otherSliderItemsShow() {
    //   const tmp = this.otherSliderItemsShowSettings
    //   return Math.min(this.sameart.length, tmp.count)
    // },

  },
  mounted(){
    this.$nextTick( this.$forceUpdate )

    // if (this.feedbacks && this.feedbacks.length) this.feedbackVisible = this.feedbacks.slice(0, this.feedbackCount)
    if (process.browser && this.sizes) {
      const currentSize = this.sizes.find(sz => sz.active && sz.ostatok)
      if (currentSize) this.selectSize({value: currentSize, toggle:true})
    }
    this.setHasArrows()
  },
  beforeMount(){
    window.addEventListener('resize', this.setHasArrows)
  },
  beforeDestroy(){
    window.removeEventListener('resize', this.setHasArrows)
  },
  methods : {
    declensionEndings(v, type) {
      // const arr = ['отзыв','отзыва','отзывов']
      return `${v} ${this.$declensionEndings(v, type)}`

    },
    getVisibleSlidersCount(w){
      const responsive = [
        { breakpoint: Infinity, slidesToShow: 6, },
        { breakpoint: 1600, slidesToShow: 6, },
        { breakpoint: 1300, slidesToShow: 5, },
        { breakpoint: 1100, slidesToShow: 4, },
        { breakpoint: 767,  slidesToShow: 7, },
        { breakpoint: 0,    slidesToShow: 7, },
      ]
      let arr = responsive.filter(v => v.breakpoint > w)
      if (arr && arr.length) {
        return arr.sort((a,b) => a.breakpoint - b.breakpoint)[0].slidesToShow
      }
      return Infinity
    },
    setHasArrows() {
      console.log('setHasArrows')
      if (process.browser && this.sameart) {
        this.hasArrows = this.getVisibleSlidersCount(window.innerWidth) < this.sameart.length
      }
    },
    imgUpdate(e){
      this.imgWidth = e.width
      this.imgHeight = e.height
    },

    selectSize(v) {
      if (v.toggle) {
        this.selectedSizeCount = v.value.count || 1
        this.selectedSize = v.value
      }
    },
    async addToCart() {
      const val = []
      val.push({scode: this.selectedSize.scode, q: this.selectedSizeCount })
      // console.log('val: ', val)
      this.$store.dispatch('cart/addToCart', val)
      await this.$nuxt.refresh()
    },


  }


}

</script>

<style lang="scss">
@import "product-page";
.test {
  position: static;
}
</style>
